import provided
import helper
import re





# Setup blank lines for plaintext1 and plaintext2 to keep track of decoded message
plaintext1 = list("_________________________________________________________________________________________________________________________")
plaintext2 = list("_________________________________________________________________________________________________________________________")



test_string = "ANY_TEST_STRING_HERE"

test_bits = provided.string_to_bits(test_string)

C1_bits = provided.seq_to_bits(C2)
C2_bits = provided.seq_to_bits(C1)

print("Length of text is " + str(len(C1)/7) + " characters.\n")
print("Test string is '" + test_string + "'")
print("Printing matches... (Char position: |match|)\n")

k = 0

for i in range(0, len(C1_bits)-(len(test_bits)-1)):

	C1_substring = C1_bits[i:i+len(test_bits)]
	C2_substring = C2_bits[i:i+len(test_bits)]

	key_attempt = helper.XOR(test_bits, C1_substring)

	M2_attempt_bits = helper.XOR(key_attempt, C2_substring)
	M2_attempt_substring = provided.bits_to_string(M2_attempt_bits)

	# if k==0:
	# 	print "1st substring: {0}".format(C1_substring)
	# 	print "2nd substring: {0}".format(C2_substring)
	# 	print "test substring: {0}".format(test_bits)
	# 	print "Key from XOR against 1st: {0}".format(key_attempt)
	# 	print "Message bits from XOR against 2nd: {0}".format(M2_attempt_bits)
	# 	print "Message string from XOR against 2nd: {0}".format(M2_attempt_substring)
	# 	k += 1

	regex = "([A-Za-z., -' ()]){"+str(len(test_string))+"}"
	if re.match(regex, M2_attempt_substring):
		if i==0:
			print "{0}: |{1}|".format(i, M2_attempt_substring)
		else:
			print "{0}: |{1}|".format(i/7, M2_attempt_substring)
		# print key_attempt

# Add words here as we decode them
# Example: 
# plaintext1[64:68] = list("that")
# plaintext2[64:68] = list("pear")



# Print out decoded lines
print(''.join(plaintext1))
print(''.join(plaintext2))
